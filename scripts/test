#!/bin/bash

# Go test script
# This script runs all tests with coverage and race detection

set -e

# Ensure GOPATH/bin is in the PATH, as go install places binaries there.
export GOPATH=${GOPATH:-$HOME/go}
export PATH=$PATH:$GOPATH/bin
export PATH=$PATH:$HOME/go/bin # Explicitly add $HOME/go/bin as well

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check if --ci flag is passed
if [[ "$1" == "--ci" ]]; then
    echo -e "${BLUE}üß™ Running Go tests in CI mode...${NC}"

    # Download dependencies first (unless using vendor)
    if [ ! -f "vendor/modules.txt" ]; then
        echo -e "${BLUE}Downloading dependencies...${NC}"
        go mod download
    fi

    # Check if gotestsum is available
    if ! command -v gotestsum &>/dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è  gotestsum not found, installing...${NC}"
        go install gotest.tools/gotestsum@latest
    fi

    # Run all tests including E2E with gotestsum, race detection and coverage
    echo -e "${BLUE}Running all tests (including E2E) with gotestsum, race detection and coverage...${NC}"
    TEST_FLAGS="-race -coverprofile=coverage.out -tags=testcoverage"
    if [ -f "vendor/modules.txt" ]; then
        TEST_FLAGS="-mod=vendor $TEST_FLAGS"
    fi
    if gotestsum --format dots-v2 -- $TEST_FLAGS ./...; then
        echo -e "${GREEN}‚úÖ All tests passed!${NC}"
    else
        echo -e "${RED}‚ùå Some tests failed.${NC}"
        exit 1
    fi

    # Generate coverage report
    echo -e "${BLUE}Generating coverage report...${NC}"
    if go tool cover -html=coverage.out -o coverage.html; then
        echo -e "${GREEN}‚úÖ Coverage report generated: coverage.html${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Failed to generate HTML coverage report${NC}"
    fi

    # Check test coverage
    echo -e "${BLUE}Checking test coverage...${NC}"
    if command -v bc &>/dev/null; then
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo -e "${BLUE}Total test coverage: ${COVERAGE}%${NC}"

        # Note: Temporarily disabled coverage threshold check for CI to test codecov upload
        # TODO: Re-enable once codecov is working and coverage is improved
        # # Fail if coverage is below 80%
        # if (($(echo "$COVERAGE < 80" | bc -l))); then
        #     echo -e "${RED}‚ùå Test coverage is below 80%${NC}"
        #     exit 1
        # else
        #     echo -e "${GREEN}‚úÖ Test coverage meets minimum requirement (80%)${NC}"
        # fi

        if (($(echo "$COVERAGE < 80" | bc -l))); then
            echo -e "${YELLOW}‚ö†Ô∏è  Test coverage is below 80% (${COVERAGE}%) - would normally fail but allowing codecov upload${NC}"
        else
            echo -e "${GREEN}‚úÖ Test coverage meets minimum requirement (80%)${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  bc command not found, skipping coverage threshold check${NC}"
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}')
        echo -e "${BLUE}Total test coverage: ${COVERAGE}${NC}"
    fi

    echo -e "${GREEN}üéâ All tests completed successfully!${NC}"
else
    # Non-CI mode: pass all arguments to gotestsum
    echo -e "${BLUE}üß™ Running Go tests with gotestsum...${NC}"

    # Check if gotestsum is available
    if ! command -v gotestsum &>/dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è  gotestsum not found, installing...${NC}"
        go install gotest.tools/gotestsum@latest
    fi

    # Download dependencies first (unless using vendor)
    if [ ! -f "vendor/modules.txt" ]; then
        echo -e "${BLUE}Downloading dependencies...${NC}"
        go mod download
    fi

    # Run gotestsum with all passed arguments
    echo -e "${BLUE}Running gotestsum with args: $*${NC}"
    gotestsum "$@"
fi
