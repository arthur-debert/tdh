                   Development Conventions

This document defines comprehensive coding standards, patterns, and best
practices for the tdh codebase. All contributors must follow these
conventions.

Documentation Standards
-----------------------

Format Requirements:
• ALL documentation MUST use txxt format (see specs/txxt-primer.txxt)
• Use consistent 4-space indentation
• Even .txt files should be txxt formatted

Documentation Locations:
• Design documents: docs/design/
• Developer guides: docs/dev/
• User documentation: docs/user/
• API documentation: Inline Go doc comments

Documentation Style:
• Explain WHY, not WHAT
• Document design decisions and trade-offs
• Include examples for complex concepts
• Reference relevant design docs

Error Handling
--------------

Error Philosophy:
All errors MUST have both code and message to enable:
• Stable testing (test codes, not strings)
• Future internationalization
• Programmatic error handling

Error Creation:
```go
// Use factory functions from pkg/errors
err := errors.New(errors.ErrPackNotFound, "pack not found: vim")
err := errors.Wrapf(existingErr, errors.ErrTriggerFailed, 
    "failed to execute trigger %s", triggerName)
```

Error Testing:
```go
// Always test error codes, never messages
var tdhErr errors.TdhError
require.True(t, errors.As(err, &tdhErr))
assert.Equal(t, errors.ErrPackNotFound, tdhErr.Code())
```

Error Constants:
```go
// Define at package level
const (
    ErrPackNotFound  = "PACK_NOT_FOUND"
    ErrInvalidConfig = "INVALID_CONFIG"
)
```

Logging Standards
-----------------

Logging is MANDATORY for all new code. Use structured logging with
appropriate levels.

Log Levels:
• TRACE (-vvv): Very detailed execution flow
• DEBUG (-vv): Detailed debugging information  
• INFO (-v): General operational information
• WARN (default): Warnings and recoverable errors
• ERROR: Errors preventing operation completion

Logger Usage:
```go
// Get logger with component context
logger := logging.GetLogger("powerups.symlink")

// Structured logging with context
logger.Debug().
    Str("pack", packName).
    Str("file", fileName).
    Int("matches", len(matches)).
    Dur("duration", elapsed).
    Msg("processing symlink matches")
```

Logging Best Practices:
• Include relevant context fields
• Use structured fields, not sprintf
• Log at appropriate levels
• Include operation durations for performance tracking

Code Quality Standards
----------------------

Pre-commit Hooks:
• MANDATORY - no exceptions
• Auto-runs lint and test
• Install with: scripts/pre-commit install
• Fix all issues before committing

Type Safety:
• Write type-safe code throughout
• Avoid interface{} unless absolutely necessary
• No magic strings - use constants
• Define types for domain concepts
• Leverage Go's type system

User-Facing Strings:
```go
// Keep at module level for easy review
const (
    msgPackNotFound = "pack not found: %s"
    msgInvalidConfig = "invalid configuration in %s"
)
```

Architecture Principles
-----------------------

CLI Layer:
• Must be Cobra-based and thin
• Business logic in pkg/, not cmd/
• Only handles argument parsing and output formatting
• No direct filesystem operations

Package Documentation
---------------------

Package Comments:
```go
// Package triggers provides file and directory matching functionality
// for the tdh dotfiles manager.
//
// Triggers implement pattern-matching strategies to identify files that
// should be processed by specific power-ups. Each trigger focuses on a
// single matching criterion.
package triggers
```

Type Documentation:
```go
// TriggerMatch represents a file that has been matched by a trigger.
// It contains all context needed for power-up processing.
type TriggerMatch struct {
    Path     string                 // Relative path within pack
    Pack     string                 // Pack name
    PowerUp  string                 // Target power-up name
    Priority int                    // Processing priority
    Metadata map[string]interface{} // Additional context
}
```

Development Workflow
--------------------

Environment Setup:
• Source .envrc for environment variables
• Use PROJECT_ROOT for repository root
• Use tmp/ for all temporary files

Commit Messages:
• For releases: "Release X.Y.Z: description"
• For issues: "fixes #123: description"
• Keep commits focused and atomic

Pull Requests:
• Create PR early for visibility
• Keep PRs focused on single feature
• Ensure all CI checks pass
• Use gh CLI to verify: gh pr checks


File Organization
-----------------

• Use PROJECT_ROOT/tmp/ for temporary files
• Clean up test artifacts
• Don't litter the repository
• Add tmp/ to .gitignore

Remember: The goal is safe, testable, and maintainable code. When in
doubt, refer to existing patterns in the codebase or ask for guidance.
